//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::KeyScope;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "api_key_scopes")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub scope_id: Uuid,
    pub key_id: Uuid,
    pub service_id: Uuid,
    pub group_id: Option<Uuid>,
    pub scope: KeyScope,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::api_keys::Entity",
        from = "Column::KeyId",
        to = "super::api_keys::Column::KeyId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    ApiKeys,
    #[sea_orm(
        belongs_to = "super::groups::Entity",
        from = "(Column::ServiceId, Column::GroupId)",
        to = "(super::groups::Column::ServiceId, super::groups::Column::GroupId)",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Groups,
    #[sea_orm(
        belongs_to = "super::services::Entity",
        from = "Column::ServiceId",
        to = "super::services::Column::ServiceId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Services,
}

impl Related<super::api_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiKeys.def()
    }
}

impl Related<super::groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Groups.def()
    }
}

impl Related<super::services::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Services.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
