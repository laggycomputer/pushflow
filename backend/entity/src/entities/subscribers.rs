//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "subscribers")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, unique)]
    pub subscriber_id: Uuid,
    pub name: Option<String>,
    pub email: Option<String>,
    pub endpoint: String,
    pub client_key: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::group_subscribers::Entity")]
    GroupSubscribers,
}

impl Related<super::group_subscribers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupSubscribers.def()
    }
}

impl Related<super::groups::Entity> for Entity {
    fn to() -> RelationDef {
        super::group_subscribers::Relation::Groups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::group_subscribers::Relation::Subscribers.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
